Started by user admin
Obtained Project-3/text-analyzer-app/Jenkinsfile from git https://github.com/khannashiv/Jenkins-Practice
[Pipeline] Start of Pipeline
[Pipeline] node
Running on Jenkins in /var/lib/jenkins/workspace/Test
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Declarative: Checkout SCM)
[Pipeline] checkout
The recommended git tool is: git
No credentials specified
 > git rev-parse --resolve-git-dir /var/lib/jenkins/workspace/Test/.git # timeout=10
Fetching changes from the remote Git repository
 > git config remote.origin.url https://github.com/khannashiv/Jenkins-Practice # timeout=10
Fetching upstream changes from https://github.com/khannashiv/Jenkins-Practice
 > git --version # timeout=10
 > git --version # 'git version 2.43.0'
 > git fetch --tags --force --progress -- https://github.com/khannashiv/Jenkins-Practice +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git rev-parse refs/remotes/origin/main^{commit} # timeout=10
Checking out Revision 97aec3d42e23f4364898a028f779b4e0884caa6f (refs/remotes/origin/main)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f 97aec3d42e23f4364898a028f779b4e0884caa6f # timeout=10
Commit message: "test"
 > git rev-list --no-walk 87ee1d5fed358ee814983b620a22e292c07f8798 # timeout=10
[Pipeline] }
[Pipeline] // stage
[Pipeline] withEnv
[Pipeline] {
[Pipeline] withEnv
[Pipeline] {
[Pipeline] stage
[Pipeline] { (Checkout)
[Pipeline] git
The recommended git tool is: git
Warning: CredentialId "GitHub-auth-creds" could not be found.
 > git rev-parse --resolve-git-dir /var/lib/jenkins/workspace/Test/.git # timeout=10
Fetching changes from the remote Git repository
 > git config remote.origin.url https://github.com/khannashiv/Jenkins-Practice.git # timeout=10
Fetching upstream changes from https://github.com/khannashiv/Jenkins-Practice.git
 > git --version # timeout=10
 > git --version # 'git version 2.43.0'
 > git fetch --tags --force --progress -- https://github.com/khannashiv/Jenkins-Practice.git +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git rev-parse refs/remotes/origin/main^{commit} # timeout=10
Checking out Revision 97aec3d42e23f4364898a028f779b4e0884caa6f (refs/remotes/origin/main)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f 97aec3d42e23f4364898a028f779b4e0884caa6f # timeout=10
 > git branch -a -v --no-abbrev # timeout=10
 > git branch -D main # timeout=10
 > git checkout -b main 97aec3d42e23f4364898a028f779b4e0884caa6f # timeout=10
Commit message: "test"
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Build Docker Image)
[Pipeline] script
[Pipeline] {
[Pipeline] sh
+ echo Buid Docker Image
Buid Docker Image
+ ls -al /var/lib/jenkins/workspace/Test/Project-3/text-analyzer-app/
total 44
drwxr-xr-x 4 jenkins jenkins 4096 May 11 08:11 .
drwxr-xr-x 3 jenkins jenkins 4096 May 11 07:52 ..
-rw-r--r-- 1 jenkins jenkins  271 May 11 08:11 .dockerignore
-rw-r--r-- 1 jenkins jenkins  361 May 11 08:11 .gitattributes
-rw-r--r-- 1 jenkins jenkins  397 May 11 08:11 Dockerfile
-rw-r--r-- 1 jenkins jenkins 4643 May 11 08:11 Jenkinsfile
-rw-r--r-- 1 jenkins jenkins    0 May 11 08:11 README.md
drwxr-xr-x 3 jenkins jenkins 4096 May 11 08:11 app
-rw-r--r-- 1 jenkins jenkins   15 May 11 08:11 requirements.txt
drwxr-xr-x 2 jenkins jenkins 4096 May 11 08:11 text-analyzer-app-manifests
-rw-r--r-- 1 jenkins jenkins   46 May 11 08:11 wsgi.py
+ pwd
/var/lib/jenkins/workspace/Test
+ docker build -t khannashiv/text-analyzer:23 -f Project-3/text-analyzer-app/Dockerfile Project-3/text-analyzer-app
DEPRECATED: The legacy builder is deprecated and will be removed in a future release.
            Install the buildx component to build images with BuildKit:
            https://docs.docker.com/go/buildx/

Sending build context to Docker daemon  18.94kB
Step 1/7 : FROM python:3.10-slim
 ---> abe836e1b93b
Step 2/7 : WORKDIR /app
 ---> Using cache
 ---> 101a51ec70b6
Step 3/7 : COPY requirements.txt .
 ---> Using cache
 ---> 04e3ef480bc5
Step 4/7 : RUN pip install --no-cache-dir -r requirements.txt
 ---> Using cache
 ---> c05102ebee89
Step 5/7 : COPY . .
 ---> cfffbd00d60b
Step 6/7 : EXPOSE 8000
 ---> Running in 78fb7dea2850
 ---> Removed intermediate container 78fb7dea2850
 ---> 0fd53fef4a73
Step 7/7 : CMD ["gunicorn", "--bind", "0.0.0.0:8000", "wsgi:app"]
 ---> Running in 7fb1ba69de54
 ---> Removed intermediate container 7fb1ba69de54
 ---> e793e94fef20
Successfully built e793e94fef20
Successfully tagged khannashiv/text-analyzer:23
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Test Image)
[Pipeline] echo
We will add test stage later.
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Docker login and Push the artifacts)
[Pipeline] withCredentials
Masking supported pattern matches of $DOCKER_PASS
[Pipeline] {
[Pipeline] script
[Pipeline] {
[Pipeline] sh
+ echo Login to Docker Hub
Login to Docker Hub
+ echo ****
+ docker login -u khannashiv --password-stdin
WARNING! Your password will be stored unencrypted in /var/lib/jenkins/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credentials-store

Login Succeeded
+ echo Push to Repo
Push to Repo
+ docker push khannashiv/text-analyzer:23
The push refers to repository [docker.io/khannashiv/text-analyzer]
06ba818fda29: Preparing
21c16a37db4e: Preparing
92ee1960a10b: Preparing
48787c57dc7b: Preparing
4bd3cc4c71de: Preparing
4be1d3802eb7: Preparing
21649572714d: Preparing
6c4c763d22d0: Preparing
4be1d3802eb7: Waiting
21649572714d: Waiting
6c4c763d22d0: Waiting
92ee1960a10b: Layer already exists
48787c57dc7b: Layer already exists
21c16a37db4e: Layer already exists
4bd3cc4c71de: Layer already exists
21649572714d: Layer already exists
6c4c763d22d0: Layer already exists
4be1d3802eb7: Layer already exists
06ba818fda29: Pushed
23: digest: sha256:9453abfc3f742d7ee542786d44b35ed66ac010c442df754a267ace615fa0e4b3 size: 1991
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // withCredentials
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Checkout K8S manifest SCM)
[Pipeline] git
The recommended git tool is: NONE
Warning: CredentialId "GitHub-auth-creds" could not be found.
 > git rev-parse --resolve-git-dir /var/lib/jenkins/workspace/Test/.git # timeout=10
Fetching changes from the remote Git repository
 > git config remote.origin.url https://github.com/khannashiv/CICD-manifests # timeout=10
Fetching upstream changes from https://github.com/khannashiv/CICD-manifests
 > git --version # timeout=10
 > git --version # 'git version 2.43.0'
 > git fetch --tags --force --progress -- https://github.com/khannashiv/CICD-manifests +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git rev-parse refs/remotes/origin/main^{commit} # timeout=10
Checking out Revision 0940b60a926b644c3b5ca768c66ba94963671173 (refs/remotes/origin/main)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f 0940b60a926b644c3b5ca768c66ba94963671173 # timeout=10
 > git branch -a -v --no-abbrev # timeout=10
 > git branch -D main # timeout=10
 > git checkout -b main 0940b60a926b644c3b5ca768c66ba94963671173 # timeout=10
Commit message: "Updated the deploy.yaml along with this copying service.yaml | Jenkins Pipeline"
 > git rev-list --no-walk 672086558cb13fe808443a09819a2eea5eb1f8c3 # timeout=10
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Update K8S manifest & push to Repo)
[Pipeline] withEnv
[Pipeline] {
[Pipeline] script
[Pipeline] {
[Pipeline] withCredentials
Masking supported pattern matches of $GITHUB_TOKEN
[Pipeline] {
[Pipeline] sh
+ echo Cloning target repo...
Cloning target repo...
+ rm -rf target-repo
+ git clone https://****@github.com/khannashiv/CICD-manifests.git target-repo
Cloning into 'target-repo'...
+ echo Cloning source repo (Jenkins-Practice)...
Cloning source repo (Jenkins-Practice)...
+ rm -rf src-repo
+ git clone https://github.com/khannashiv/Jenkins-Practice.git src-repo
Cloning into 'src-repo'...
+ echo Modifying deploy.yaml in source repo
Modifying deploy.yaml in source repo
+ SERVICE_YAML_PATH=src-repo/Project-3/text-analyzer-app/text-analyzer-app-manifests/service.yml
+ DEPLOY_YAML_PATH=src-repo/Project-3/text-analyzer-app/text-analyzer-app-manifests/deploy.yml
+ sed -i s/ReplaceImageTag/23/g src-repo/Project-3/text-analyzer-app/text-analyzer-app-manifests/deploy.yml
+ echo Printing the udpated build number for manifest files.
Printing the udpated build number for manifest files.
+ cat src-repo/Project-3/text-analyzer-app/text-analyzer-app-manifests/deploy.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: text-analyzer-app
  labels:
    app: text-analyzer-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: text-analyzer-app
  template:
    metadata:
      labels:
        app: text-analyzer-app
    spec:
      containers:
      - name:  text-analyzer-app
        image: khannashiv/text-analyzer:23
        ports:
        - containerPort: 8000+ echo Copying updated deploy.yaml to target repo
Copying updated deploy.yaml to target repo
+ mkdir -p target-repo/Project-3/text-analyzer-app/text-analyzer-app-manifests
+ cp src-repo/Project-3/text-analyzer-app/text-analyzer-app-manifests/deploy.yml target-repo/Project-3/text-analyzer-app/text-analyzer-app-manifests/
+ cp src-repo/Project-3/text-analyzer-app/text-analyzer-app-manifests/service.yml target-repo/Project-3/text-analyzer-app/text-analyzer-app-manifests/
+ cd target-repo
+ git config user.email khannashiv94@gmail.com
+ git config user.name Shiv
+ git add Project-3/text-analyzer-app/text-analyzer-app-manifests/deploy.yml Project-3/text-analyzer-app/text-analyzer-app-manifests/service.yml
+ git commit -m Updated the deploy.yaml along with this copying service.yaml | Jenkins Pipeline
[main ea9e66c] Updated the deploy.yaml along with this copying service.yaml | Jenkins Pipeline
 2 files changed, 2 insertions(+), 2 deletions(-)
+ git push origin main
To https://github.com/khannashiv/CICD-manifests.git
   0940b60..ea9e66c  main -> main
[Pipeline] }
[Pipeline] // withCredentials
[Pipeline] }
[Pipeline] // script
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Declarative: Post Actions)
[Pipeline] echo
Build and push successful!
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // withEnv
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
Finished: SUCCESS
