pipeline {

  agent {
    docker {
      image 'khannashiv/maven-shiv-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }

  options {
    skipDefaultCheckout(true) // Disable default SCM checkout to fix permission issues
    buildDiscarder(logRotator(numToKeepStr: '10'))
  }

  stages {

    stage('Clean Workspace & Fix Permissions') {
      steps {
        sh '''
          echo "Cleaning workspace and fixing permissions..."
          rm -rf ${WORKSPACE}/*
          mkdir -p ${WORKSPACE}
          chown -R 111:113 ${WORKSPACE}
        '''
      }
    }

    stage('Checkout') {
      steps {
        checkout([
          $class: 'GitSCM',
          branches: [[name: '*/main']],
          userRemoteConfigs: [[
            url: 'https://github.com/khannashiv/Jenkins-Practice.git',
            credentialsId: 'github'
          ]]
        ])
      }
    }

    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        sh 'cd Project-1/java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }

    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://52.90.245.58:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube_token', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd Project-1/java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }

    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "khannashiv/ultimate-cicd:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          sh 'cd Project-1/java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }

    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "Jenkins-Practice"
        GIT_USER_NAME = "khannashiv"
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            echo "Updating deployment.yml with image tag ${BUILD_NUMBER}"
            export GIT_DIR=$WORKSPACE/.git
            export GIT_WORK_TREE=$WORKSPACE
            git config user.email "khannashiv94@gmail.com"
            git config user.name "Shiv"

            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" Project-1/java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git add Project-1/java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml

            git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "Nothing to commit"
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main || echo "Nothing to push"
          '''
        }
      }
    }

  }
}
